{
  
    
        "post0": {
            "title": "Titanic: Machine Learning from Disaster",
            "content": "Overview . . Description . The sinking of the Titanic is one of the most infamous shipwrecks in history. . On April 15, 1912, during her maiden voyage, the widely considered “unsinkable” RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew. . While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others. . In this challenge, we ask you to build a predictive model that answers the question: “what sorts of people were more likely to survive?” using passenger data (ie name, age, gender, socio-economic class, etc). . What Data Will I Use in This Competition? . In this competition, you’ll gain access to two similar datasets that include passenger information like name, age, gender, socio-economic class, etc. One dataset is titled train.csv and the other is titled test.csv. . Train.csv will contain the details of a subset of the passengers on board (891 to be exact) and importantly, will reveal whether they survived or not, also known as the “ground truth”. . The test.csv dataset contains similar information but does not disclose the “ground truth” for each passenger. It’s your job to predict these outcomes. . Using the patterns you find in the train.csv data, predict whether the other 418 passengers on board (found in test.csv) survived. . Evaluation . Goal . It is your job to predict if a passenger survived the sinking of the Titanic or not. For each in the test set, you must predict a 0 or 1 value for the variable. . Metric . Your score is the percentage of passengers you correctly predict. This is known as accuracy. . Submission File Format . You should submit a csv file with exactly 418 entries plus a header row. Your submission will show an error if you have extra columns (beyond PassengerId and Survived) or rows. . The file should have exactly 2 columns: . PassengerId (sorted in any order) Survived (contains your binary predictions: 1 for survived, 0 for deceased) PassengerId,Survived 892,0 893,1 894,0 Etc. . Problem-Solving Process . . Important: Although the problem-solving process presented here looks like a linear and waterfall style, it&#8217;s actually really an iterative process, which means that you may need to go back and forth to make sure your previous hypothesis was correct, or you need to test whether your new idea really works. . Initial Setup . First we need to import libraries . #collapse-hide %matplotlib inline import matplotlib.pyplot as plt import pandas as pd import numpy as np import collections # allow IPython Notebook cell multiple outputs from IPython.core.interactiveshell import InteractiveShell InteractiveShell.ast_node_interactivity = &quot;all&quot; . . Initialize plotting parameters . #collapse-hide plt.rcParams[&#39;figure.figsize&#39;] = (12,8) plt.rcParams[&#39;font.size&#39;] = 14 plt.rcParams[&#39;axes.grid&#39;] = True . . Then we download training/testing data from Kaggle using kaggle-api. . #collapse-hide !kaggle competitions download -c titanic --force !unzip -o titanic.zip -d ./datasets . . Downloading titanic.zip to /Users/cyyeh/Desktop/TYCS/blog/_notebooks 0%| | 0.00/34.1k [00:00&lt;?, ?B/s] 100%|██████████████████████████████████████| 34.1k/34.1k [00:00&lt;00:00, 1.76MB/s] Archive: titanic.zip inflating: ./datasets/gender_submission.csv inflating: ./datasets/test.csv inflating: ./datasets/train.csv . . Note: If you see an error like this, IOError: Could not find kaggle.json. Make sure it is located in /root/.kaggle. Or use the environment method., please upload your kagggle.json file which has api username and api key inside. . Let&#39;s check what are inside the datasets directory . #collapse-hide !ls ./datasets . . gender_submission.csv test.csv train.csv . EDA . A Sneak Peek . Let&#39;s load data into pandas DataFrame format, since it&#39;s much easier for computation and anlysis. Then we can have a sneak peek at the datasets. . #collapse-hide train_data_path = &#39;./datasets/train.csv&#39; test_data_path = &#39;./datasets/test.csv&#39; train_df = pd.read_csv(train_data_path) test_df = pd.read_csv(test_data_path) print(&quot;Training dataset&quot;) train_df print(&quot;Testing dataset&quot;) test_df . . Training dataset . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 | 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 | 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 | 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 | 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 | 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 | 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.0000 | NaN | S | . 887 | 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.0000 | B42 | S | . 888 | 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | . 889 | 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | . 890 | 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | . 891 rows × 12 columns . Testing dataset . PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 | 892 | 3 | Kelly, Mr. James | male | 34.5 | 0 | 0 | 330911 | 7.8292 | NaN | Q | . 1 | 893 | 3 | Wilkes, Mrs. James (Ellen Needs) | female | 47.0 | 1 | 0 | 363272 | 7.0000 | NaN | S | . 2 | 894 | 2 | Myles, Mr. Thomas Francis | male | 62.0 | 0 | 0 | 240276 | 9.6875 | NaN | Q | . 3 | 895 | 3 | Wirz, Mr. Albert | male | 27.0 | 0 | 0 | 315154 | 8.6625 | NaN | S | . 4 | 896 | 3 | Hirvonen, Mrs. Alexander (Helga E Lindqvist) | female | 22.0 | 1 | 1 | 3101298 | 12.2875 | NaN | S | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 413 | 1305 | 3 | Spector, Mr. Woolf | male | NaN | 0 | 0 | A.5. 3236 | 8.0500 | NaN | S | . 414 | 1306 | 1 | Oliva y Ocana, Dona. Fermina | female | 39.0 | 0 | 0 | PC 17758 | 108.9000 | C105 | C | . 415 | 1307 | 3 | Saether, Mr. Simon Sivertsen | male | 38.5 | 0 | 0 | SOTON/O.Q. 3101262 | 7.2500 | NaN | S | . 416 | 1308 | 3 | Ware, Mr. Frederick | male | NaN | 0 | 0 | 359309 | 8.0500 | NaN | S | . 417 | 1309 | 3 | Peter, Master. Michael J | male | NaN | 1 | 1 | 2668 | 22.3583 | NaN | C | . 418 rows × 11 columns . So, for the training dataset, there are 891 instances; while for the testing dataset, there are only 418 instances. Besides that, we can see that the training dataset has 12 columns(11 feature columns), since it has a label(Survived) for each instance. Now let&#39;s understand the training dataset further, such as inspect data type of each column, check if there is any null value, etc. . More Information on Data: Data Types, Missing Values, etc. . #collapse-hide train_df.info() . . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . Since there are 891 entries in total, so Age, Cabin and Embarked columns have missing values(null). Besides, since this is a binary classification task, we need to make sure the labels really have two values only.(0 or 1) . #collapse-hide train_df[&#39;Survived&#39;].value_counts() . . 0 549 1 342 Name: Survived, dtype: int64 . Now let&#39;s understand the meaning of each column in traning data deeper. . Data Dictionary . Variable Definition Key . survival | Survivial | 0 = No, 1 = Yes | . pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd | . sex | Sex | | . Age | Age in years | | . sibsp | # of siblings/spouses aboard the Titanic | | . parch | # of parents/children aboard the Titanic | | . ticket | Ticket number | | . fare | Passenger fare | | . cabin | Cabin number | | . embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton | . Variable Notes . Tip: Since the numbers below all have true meanings, so it&#8217;s better to simply use regular numbers for encoding the features. If a feature doesn&#8217;t have ordinal characteristics, then we can transfer numbers to the one-hot encoding format. . pclass: A proxy for socio-economic status (SES) . 1st = Upper | 2nd = Middle | 3rd = Lower | . age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5 . sibsp: The dataset defines family relations in this way... . Sibling = brother, sister, stepbrother, stepsister | Spouse = husband, wife (mistresses and fiancés were ignored) | . parch: The dataset defines family relations in this way... . Parent = mother, father | Child = daughter, son, stepdaughter, stepson Some children travelled only with a nanny, therefore parch=0 for them. | . | . Plotting for Easier Exploration . PassengerId . #collapse-hide plt.title(&#39;PassengerId&#39;); plt.xlabel(&#39;Instance Entry&#39;); plt.ylabel(&#39;PassengerId&#39;); plt.plot(train_df[&#39;PassengerId&#39;]); . . It should be a straight line . #collapse-hide assert collections.Counter(train_df[&#39;PassengerId&#39;]) == collections.Counter(range(1, 892)), &#39;PassengerId is not a straight line&#39; . . Pclass . #collapse-hide plt.title(&#39;Ticket class(1=1st, 2=2nd, 3=3rd)&#39;); plt.xlabel(&#39;Pclass&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Pclass&#39;]); . . Sex . #collapse-hide plt.title(&#39;Sex&#39;); plt.xlabel(&#39;Sex&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Sex&#39;]); . . Age . #collapse-hide plt.title(&#39;Age in years&#39;); plt.xlabel(&#39;Age&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Age&#39;].dropna(), bins=30); . . . Note: The Age column has 177(891-714) null values. . Sibsp . #collapse-hide plt.title(&#39;# of siblings/spouses aboard the Titanic&#39;); plt.xlabel(&#39;SibSp&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;SibSp&#39;]); . . Parch . #collapse-hide plt.title(&#39;# of parents/children aboard the Titanic&#39;); plt.xlabel(&#39;Parch&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Parch&#39;]); . . Fare . #collapse-hide plt.title(&#39;Passenger fare&#39;); plt.xlabel(&#39;Fare&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Fare&#39;], bins=30); . . Embarked . #collapse-hide plt.title(&#39;Port of Embarkation(C=Cherbourg, Q=Queenstown, S=Southampton)&#39;); plt.xlabel(&#39;Embarked&#39;); plt.ylabel(&#39;Number&#39;); plt.hist(train_df[&#39;Embarked&#39;].dropna()); . . Modeling and Evaluation . Reference . Titanic: Machine Learning from Disaster | . Comments .",
            "url": "https://data-products.info/kaggle-titanic.html",
            "relUrl": "/kaggle-titanic.html",
            "date": " • Mar 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "You can know more about me from here. .",
          "url": "https://data-products.info/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}